---

resource_types:
- name: teams-notification
  type: docker-image
  source:
    repository: navicore/teams-notification-resource
    tag: latest

resources:

- name: git-repo
  type: git
  source:
    uri: ((bitbucket-uri))
    branch: ((branch-name))
    private_key: ((private-repo-key))
    source: &demo-source
      cf_deploy_user: ((cf-prd-username))
      cf_deploy_password: ((cf-prd-password))      
      artifactory-username: ((artifactory-username))
      artifactory-password: ((artifactory-password))
      cf_app_name: mis-demo
      file_prefix: 'mediainfosvc'
      cf_space: 'demo'
      cf_env: 'prod'
      cf_preceding_space: pcpm
      cf_preceding_appname: mis-pcpm
      cf_preceding_env: dev
      cf_dev_password: ((cf-dev-deploy-password))
      cf_dev_user: ((cf-dev-deploy-user))
      instance_number: 2
      memory: 512M
      setautoscale: true
      cf_api: https://api.system-prod.gp2.axadmin.net
      aspnetcore_environment: Demo
      s3_access_key: EIFNLJ0J8IOQ21M9YVO3
      s3_bucket: rms-demo
      s3_secret_key: AJ2k9MmjbHFnLzEawimFUzasOxp68RirLxH2OuNa
      s3_url: https://s3.gp2.axadmin.net
      resilience_policy_min_wait_time_msecs: 1000
      resilience_policy_max_wait_time_msecs: 20000
      resilience_policy_max_retry_count: 3
      cf_organization: mobile_backend
      teams_url: ((teams-webhook-url))
      newrelic_app_lic: ''
      buildpack_one: ''
      buildpack_two: '- dotnet_core_buildpack'

- name: utility-image
  type: docker-image
  source:
    repository: ((internal-docker-addr))/gdc/mis_utility_dev
    username: ((internal-docker-user))
    password: ((internal-docker-pass))
    tag: "latest"

- name: teams-alert
  type: teams-notification
  source:
    url: ((teams-webhook-url))

jobs:

- name: deploy-green-demo
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME Demo-Green Deploy Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-prod.gp2.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - get: utility-image
  - get: git-repo
    trigger: false    
  - task: prepare-manifest
    image: utility-image
    file: git-repo/ci/pipelines/tasks/prepare-manifest.yml
    params:
      <<: *demo-source
  - task: deploy-demo
    image: utility-image
    file: git-repo/ci/pipelines/tasks/cfpush.yml
    params:
      <<: *demo-source   

- name: blue-green-switch
  on_success:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME Demos deployed successfully - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME successful.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-prod.gp2.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME Demo Blue-To-Green Switch Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-prod.gp2.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - get: utility-image
  - get: git-repo
    passed: 
     - deploy-green-demo
    trigger: true
  - task: blue-to-green
    image: utility-image
    file: git-repo/ci/pipelines/tasks/blue-to-green.yml
    params: 
      <<: *demo-source
  - task: autoscaling
    image: utility-image
    params: 
      <<: *demo-source 
      artifactory_endpoint:  https://na-artifact-01.na.audatex.com:8443/artifactory
      artifactory_username: ((artifactory-username))
      artifactory_password: ((artifactory-password))   
    config:
      platform: linux
      inputs:
      - name: git-repo
      run:
        path: bash
        args: 
        - -exc
        - |
          set +x
          cf login -u $cf_deploy_user -p $cf_deploy_password -a https://api.system-$cf_env.gp2.axadmin.net -o $cf_organization -s $cf_space
          set -x
          if [ $setautoscale == true ]; then
            cf bind-service $cf_app_name autoscale
            curl -O -k -u $artifactory_username:$artifactory_password $artifactory_endpoint/devops-local/cf-plugins/autoscaler-linux32-2.0.91
            cf install-plugin autoscaler-linux32-2.0.91 -f
            cf update-autoscaling-limits $cf_app_name 2 4
            cf create-autoscaling-rule $cf_app_name cpu 25 75
            cf enable-autoscaling $cf_app_name 
          fi