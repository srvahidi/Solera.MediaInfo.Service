# this is dev and qa pipeline for Mediainfo Service
---

source: &dev-source
      cf_deploy_user: ((cf-preprd-username))
      cf_deploy_password: ((cf-preprd-password))
      cf_app_name: mis-dev
      file_prefix: 'mediainfosvc'
      cf_space: 'development'
      cf_env: 'dev'
      instance_number: 1
      memory: 256M
      cf_api: https://api.system-dev.usdc10.axadmin.net
      s3_access_key: ((s3-access-key))
      s3_bucket: rms-development
      s3_secret_key: ((s3-secret-key))
      resilience_policy_min_wait_time_msecs: 1000
      resilience_policy_max_wait_time_msecs: 20000
      resilience_policy_max_retry_count: 3
      cf_organization: mobile_backend
      teams_url: ((teams-webhook-url))
      newrelic_app_lic: ''
      buildpack_one: ''
      buildpack_two: '- dotnet_core_buildpack'
source: &qa-source
      cf_deploy_user: ((cf-preprd-username))
      cf_deploy_password: ((cf-preprd-password))
      artifactory-username: ((artifactory-username))
      artifactory-password: ((artifactory-password))
      cf_app_name: mis-int
      file_prefix: 'mediainfosvc'
      cf_preceding_appname: mis-dev
      cf_space: 'integration'
      cf_env: 'dev'
      cf_preceding_space: 'development'
      setautoscale: false
      instance_number: 2      
      memory: 256M
      cf_api: https://api.system-dev.usdc10.axadmin.net
      s3_access_key: ((s3-access-key))
      s3_bucket: rms-integration
      s3_secret_key: ((s3-secret-key))
      resilience_policy_min_wait_time_msecs: 1000
      resilience_policy_max_wait_time_msecs: 20000
      resilience_policy_max_retry_count: 3
      cf_organization: mobile_backend
      teams_url: ((teams-webhook-url))
      newrelic_app_lic: ''
      buildpack_one: '- newrelic_dotnet_core_buildpack_latest'
      buildpack_two: '- dotnet_core_buildpack'
source: &pcpm-source
      cf_deploy_user: ((cf-preprd-username))
      cf_deploy_password: ((cf-preprd-password))
      artifactory-username: ((artifactory-username))
      artifactory-password: ((artifactory-password))
      cf_app_name: mis-pcpm
      file_prefix: 'mediainfosvc'
      cf_preceding_appname: mis-int
      cf_space: 'pcpm'
      cf_env: 'dev'
      cf_preceding_space: 'integration'
      setautoscale: true
      instance_number: 2      
      memory: 512M
      cf_api: https://api.system-dev.usdc10.axadmin.net
      s3_access_key: ((s3-access-key))
      s3_bucket: rms-pcpm
      s3_secret_key: ((s3-secret-key))
      resilience_policy_min_wait_time_msecs: 1000
      resilience_policy_max_wait_time_msecs: 20000
      resilience_policy_max_retry_count: 3
      cf_organization: mobile_backend
      teams_url: ((teams-webhook-url))
      newrelic_app_lic: ((newrelic-license-key))
      buildpack_one: '- newrelic_dotnet_core_buildpack_latest'
      buildpack_two: '- dotnet_core_buildpack'

resource_types:
- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource
    tag: latest

- name: teams-notification
  type: docker-image
  source:
    repository: navicore/teams-notification-resource
    tag: latest

- name: app-docker-image
  type: docker-image
  source:
    repository: ((proget-url))/docker/((docker-image-path))
    username: ((proget-user))
    password: ((proget-password))
    tag: latest

- name: cf-resource
  type: docker-image
  source:
    repository: ((proget-url))/docker/gdc/cf-resource
    username: ((proget-user))
    password: ((proget-password))
    tag: latest

resources:

- name: pcpm-once-a-day
  type: time
  icon: calendar-clock
  source:
    start: 8:00 AM
    stop: 9:00 AM
    location: America/Chicago

- name: git-repo
  type: git
  source:
    uri: ((bitbucket-uri))
    branch: ((branch-name))
    private_key: ((private-repo-key))
    ignore_paths:
    - ci/pipelines/pipeline.yml
    - ci/pipelines/prod-pipeline.yml    

- name: artifacts
  type: artifactory
  source:
    endpoint: https://na-artifact-01.na.audatex.com:8443/artifactory
    repository: /mobile-backend/mediainfo-service
    regex: "mediainfosvc-(?<version>.*).zip"
    username: ((artifactory-username))
    password: ((artifactory-password))
    skip_ssl_verification: true

- name: dotnet-image
  type: docker-image
  source:
    repository: ((proget-url))/docker/rms/mobile-backend/mobile-dotnet2.2
    username: ((proget-user))
    password: ((proget-password))
    tag: "latest"
 
- name: utility-image
  type: docker-image
  source:
    repository: ((proget-url))/docker/rms/mobile-backend/mobile-utility
    username: ((proget-user))
    password: ((proget-password))
    tag: "latest"

- name: cf-dev
  type: cf-resource
  source:
    api: ((cf-preprd-api))
    username: ((cf-preprd-username))
    password: ((cf-preprd-password))
    organization: mobile_backend
    space: development
    skip_cert_check: true

- name: cf-qa
  type: cf-resource
  source:
    api: ((cf-preprd-api))
    username: ((cf-preprd-username))
    password: ((cf-preprd-password))
    organization: mobile_backend
    space: integration
    skip_cert_check: true

- name: cf-pcpm
  type: cf-resource
  source:
    api: ((cf-preprd-api))
    username: ((cf-preprd-username))
    password: ((cf-preprd-password))
    organization: mobile_backend
    space: pcpm
    skip_cert_check: true

- name: teams-alert
  type: teams-notification
  source:
    url: ((teams-webhook-url))

- name: project-metrics
  type: project-metrics
  source:
    jiraboard: Autosource.Mobile
    apiurl: https://projectmetrics-api-qa.apps-dev.gp2.axadmin.net
    sonartoken: ((sonar-auth-token))
    tribelead: Christopher Klingler

jobs:

- name: build-and-test-green
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: dotnet-image
    - get: git-repo
      version: latest
      trigger: true
  - task: build-app
    image: dotnet-image
    params:
      <<: *dev-source
    config:
      platform: linux
      inputs:
      - name: git-repo
      outputs:
      - name: binaries
      run:
        dir: git-repo
        path: bash
        args:
        - -exc
        - |          
          cd ..
          output_directory=${PWD}/binaries       
          cd git-repo/Solera.MediaInfo.Service
          dotnet publish -c release -o ${output_directory}  
          cd ..
          cp ${PWD}/ci/pipelines/manifest.yml ${output_directory}/manifest.yml
  - task: run-unit-tests
    image: dotnet-image
    config:
      platform: linux
      inputs:
      - name: git-repo
      run:
        path: bash
        dir: git-repo
        args:
        - -exc
        - |
          dotnet test ./Solera.MediaInfo.Test/Solera.MediaInfo.Test.csproj 
  - task: run-e2e-tests
    image: dotnet-image
    config:
      platform: linux
      inputs:
      - name: binaries
      - name: git-repo
      run:
        path: bash        
        args:
        - -exc
        - | 
          set +x
          export S3_ACCESS_KEY=((s3-access-key))
          export S3_SECRET_KEY=((s3-secret-key))
          set -x
          export S3_BUCKET=e2e-test-bucket
          export RESILIENCE_POLICY_MIN_WAIT_TIME_MSECS=1000
          export RESILIENCE_POLICY_MAX_WAIT_TIME_MSECS=3000
          export RESILIENCE_POLICY_MAX_RETRY_COUNT=2
          export ASPNETCORE_ENVIRONMENT=Staging
          export ASPNETCORE_URLS=http://localhost:5005
          cp ./git-repo/Solera.MediaInfo.E2eTests/appsettings.json ./appsettings.json
          dotnet ./binaries/Solera.MediaInfo.Service.dll &
          solera_mediainfo_service_pid=$!
          SKIP_APP_START=True dotnet test ./git-repo/Solera.MediaInfo.E2eTests/Solera.MediaInfo.E2eTests.csproj 
          kill -INT $solera_mediainfo_service_pid
  - task: publish
    image: dotnet-image
    params:
      <<: *dev-source
    config:
      platform: linux
      inputs:
      - name : binaries
      - name : git-repo
      outputs:
      - name: artifacts
      run:        
        path: sh
        args:
        - -exc
        - |          
          fileprefix=$(printenv file_prefix)
          cd ${PWD}/git-repo
          version=$(git describe --always | awk -F- '{printf "%s-%04d-%s", $1, $2, $3}')
          filename=${fileprefix}-${version}.zip
          cd ..
          cd ${PWD}/binaries
          zip -r ${filename} ./*
          mv ${filename} ../artifacts/${filename}
  - put: artifacts
    params:
      file: artifacts/mediainfosvc-*.zip

- name: code-analysis-green
  on_failure:
      put: teams-alert
      params:
        title: |
          $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed - Branch: ((branch-name))
        text: Job $BUILD_JOB_NAME failed.
        actionName: View Job $BUILD_JOB_NAME Results
        actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: git-repo 
    - get: artifacts
      passed: 
        - build-and-test-green
      trigger: true     
  - task: execute-code-analysis
    params:
      branch: ((branch-name))
      project-name: MediainfoService
      sonar-auth-token: ((sonar-auth-token))
      sonar-url: ((sonar-url))
    config: 
      platform: windows
      inputs:
      - name: git-repo
      outputs:
      - name: analysis-output
      run:
        path: powershell.exe
        args:
        - -File
        - '.\git-repo\ci\scripts\code-analysis.ps1'
  ensure:
     put: project-metrics
     params:
       sourcedir: git-repo
       outputdir: analysis-output
       projectname: Mediainfo.Service-MIS

- name: deploy-green-dev
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: utility-image    
    - get: artifacts
      passed:
      - code-analysis-green
      trigger: true
  - task: prepare-manifest
    image: utility-image
    params:
      <<: *dev-source
    config:
      platform: linux
      inputs:
      - name: artifacts
      outputs:
      - name: deployables
      run:
        path: sh
        args:
        - -exc
        - |
          fileprefix=$(printenv file_prefix)
          input_directory=${PWD}/artifacts
          output_directory=${PWD}/deployables
          manifest_file=${output_directory}/manifest.yml  
          zip_file=${fileprefix}-*.zip 
          unzip ${input_directory}/${zip_file} -d ${output_directory}
          echo "Listing the directory"
          ls -a
          echo "Listing the directory-End"
          sed -i -e "s/\[buildpack_one\]/${buildpack_one}/" ${manifest_file}
          sed -i -e "s/\[buildpack_two\]/${buildpack_two}/" ${manifest_file}
          sed -i -e "s/\[app_name\]/${cf_app_name}-green/" ${manifest_file}
          sed -i -e "s/\[instances\]/${instance_number}/" ${manifest_file}
          sed -i -e "s/\[memory\]/${memory}/" ${manifest_file}
          sed -i -e "s/\[newrelic_app_name\]/${cf_app_name}/" ${manifest_file}
          sed -i -e "s/\[newrelic_app_lic\]/${newrelic_app_lic}/" ${manifest_file}          
          set +x
          sed -i -e "s/\[s3_access_key\]/${s3_access_key}/" ${manifest_file}
          sed -i -e "s/\[s3_secret_key\]/${s3_secret_key}/" ${manifest_file}
          set -x
          sed -i -e "s/\[s3_bucket\]/${s3_bucket}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_min_wait_time_msecs\]/${resilience_policy_min_wait_time_msecs}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_max_wait_time_msecs\]/${resilience_policy_max_wait_time_msecs}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_max_retry_count\]/${resilience_policy_max_retry_count}/" ${manifest_file}
  - put: cf-dev
    params:
      manifest: deployables/manifest.yml
      path: deployables

- name: smoke-test-green-dev
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: utility-image    
    - get: cf-dev
      passed:
        - deploy-green-dev
      trigger: true      
  - task: smoke-tests
    image: utility-image
    params:
      <<: *dev-source
    config:
      platform: linux
      run:
        path: sh
        args:
        - -ec
        - |
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)
          cf login -u $cfuser -p $cfpass -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x

          app_url=$(cf app $cf_app_name-green | grep routes | sed -e 's/routes:\s*/https:\/\//')

          healthcheck_status=$(curl -s -o /dev/null -w "%{http_code}" ${app_url}/api/health)
          if [ "$healthcheck_status" != "200" ]; then
            echo "App healthcheck did not respond with OK as expected"
            exit 1
          fi

- name: blue-green-switch-dev
  on_success:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME Dev deployed successfully - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME successful.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed - Branch: ((branch-name))
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: utility-image
    - get: cf-dev
      passed: 
      - smoke-test-green-dev
      trigger: true
  - task: blue-to-green
    image: utility-image
    params: 
      <<: *dev-source
    config:
      platform: linux
      run:
        path: sh
        args:
        - -exc
        - |  
          set +x
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)
          cf login -u $cfuser -p $cfpass -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x
          greenApps=$(cf apps | grep $cf_app_name-green | { grep -v grep || true; })
          if [[ -z $greenApps ]]; then exit 0; fi
          cf map-route $cf_app_name-green apps-$cf_env.usdc10.axadmin.net -n $cf_app_name
          cf unmap-route $cf_app_name apps-$cf_env.usdc10.axadmin.net -n $cf_app_name
          cf unmap-route $cf_app_name-green apps-$cf_env.usdc10.axadmin.net -n $cf_app_name-green
          cf stop $cf_app_name
          cf delete $cf_app_name -f
          # Remove the Green-Temp-Route.
          cf delete-route apps-$cf_env.usdc10.axadmin.net --hostname $cf_app_name-green -f
          # Rename Green app to Blue app.
          cf rename $cf_app_name-green $cf_app_name

- name: deploy-green-qa
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - get: utility-image  
    trigger: false
  - task: prepare-manifest
    image: utility-image
    params:
      <<: *qa-source
    config:
      platform: linux
      outputs:
      - name: deployables
      run:
        path: sh
        args:
        - -exc
        - |  
          set +x
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)
          artifactorypass=$(printenv artifactory-password)
          artifactoryuser=$(printenv artifactory-username)
          cfappname=$(printenv cf_app_name)                
          
          cf login -u $cfuser -p $cfpass -a $cf_api -o $cf_organization -s $cf_space
          precedingversion=$(curl --header "Authorization: $(cf oauth-token)" https://$cf_preceding_appname.apps-$cf_env.usdc10.axadmin.net/cloudfoundryapplication/info | jq -r ".[] | {tags}[]" | awk -F- '{printf "%s-%04d-%s", $1, $2, $3}')
          echo "precedingversion" echo $precedingversion
          workingversion=$(curl --header "Authorization: $(cf oauth-token)" https://$cf_app_name.apps-$cf_env.usdc10.axadmin.net/cloudfoundryapplication/info | jq -r ".[] | {tags}[]" | awk -F- '{printf "%s-%04d-%s", $1, $2, $3}')
          echo "workingversion" echo $workingversion          
          set -x
          if [ "$workingversion" = "$precedingversion" ]; then
          echo "Skipping deployment...New version not available for deployment"
          exit 0;
          fi

          index=`expr index "${precedingversion}" g`
          git=$(echo ${precedingversion:$index})
          artifact=$file_prefix-${precedingversion}.zip

          #download zip file
          set +x
          curl -OL -k -u $artifactoryuser:$artifactorypass https://na-artifact-01.na.audatex.com:8443/artifactory/mobile-backend/mediainfo-service/$artifact
          set -x

          #extract zip
          output_directory=${PWD}/deployables
          unzip -q $artifact -d $output_directory
          manifest_file=${output_directory}/manifest.yml

          echo "Listing the directory"
          ls -a
          echo "Listing the directory-End"
          sed -i -e "s/\[buildpack_one\]/${buildpack_one}/" ${manifest_file}
          sed -i -e "s/\[buildpack_two\]/${buildpack_two}/" ${manifest_file}
          sed -i -e "s/\[app_name\]/${cf_app_name}-green/" ${manifest_file}
          sed -i -e "s/\[instances\]/${instance_number}/" ${manifest_file}
          sed -i -e "s/\[memory\]/${memory}/" ${manifest_file}
          sed -i -e "s/\[newrelic_app_name\]/${cf_app_name}/" ${manifest_file}
          sed -i -e "s/\[newrelic_app_lic\]/${newrelic_app_lic}/" ${manifest_file}
          set +x
          sed -i -e "s/\[s3_access_key\]/${s3_access_key}/" ${manifest_file}
          sed -i -e "s/\[s3_secret_key\]/${s3_secret_key}/" ${manifest_file}
          set -x
          sed -i -e "s/\[s3_bucket\]/${s3_bucket}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_min_wait_time_msecs\]/${resilience_policy_min_wait_time_msecs}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_max_wait_time_msecs\]/${resilience_policy_max_wait_time_msecs}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_max_retry_count\]/${resilience_policy_max_retry_count}/" ${manifest_file}
  - put: cf-qa
    params:
      manifest: deployables/manifest.yml
      path: deployables

- name: smoke-test-green-qa
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: utility-image 
    - get: cf-qa      
      passed:
       - deploy-green-qa
      trigger: true      
  - task: smoke-tests
    image: utility-image
    params:
      <<: *qa-source
    config:
      platform: linux
      run:
        path: sh
        args:
        - -ec
        - |
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)
          cf login -u $cfuser -p $cfpass -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x

          app_url=$(cf app $cf_app_name-green | grep routes | sed -e 's/routes:\s*/https:\/\//')

          healthcheck_status=$(curl -s -o /dev/null -w "%{http_code}" ${app_url}/api/health)
          if [ "$healthcheck_status" != "200" ]; then
            echo "App healthcheck did not respond with OK as expected"
            exit 1
          fi

- name: blue-green-switch-qa
  on_success:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME Int deployed successfully
      text: Job $BUILD_JOB_NAME successful.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: utility-image  
    - get: cf-qa          
      passed: 
      - smoke-test-green-qa
      trigger: true
  - task: blue-to-green
    image: utility-image
    params: 
      <<: *qa-source 
    config:
      platform: linux
      run:
        path: sh
        args:
        - -exc
        - |  
          set +x
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)
          cf login -u $cfuser -p $cfpass -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x
          greenApps=$(cf apps | grep $cf_app_name-green | { grep -v grep || true; })
          if [[ -z $greenApps ]]; then exit 0; fi
          cf map-route $cf_app_name-green apps-$cf_env.usdc10.axadmin.net -n $cf_app_name
          cf unmap-route $cf_app_name apps-$cf_env.usdc10.axadmin.net -n $cf_app_name
          cf unmap-route $cf_app_name-green apps-$cf_env.usdc10.axadmin.net -n $cf_app_name-green
          cf stop $cf_app_name
          cf delete $cf_app_name -f
          # Remove the Green-Temp-Route.
          cf delete-route apps-$cf_env.usdc10.axadmin.net --hostname $cf_app_name-green -f
          # Rename Green app to Blue app.
          cf rename $cf_app_name-green $cf_app_name
  - task: autoscaling
    image: utility-image
    params: 
      <<: *qa-source 
      artifactory_endpoint:  https://na-artifact-01.na.audatex.com:8443/artifactory
      artifactory_username: ((artifactory-username))
      artifactory_password: ((artifactory-password))   
    config:
      platform: linux      
      run:
        path: sh
        args: 
        - -exc
        - |
          set +x
          cf login -u $cf_deploy_user -p $cf_deploy_password -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x
          if [ $setautoscale == true ]; then
            cf bind-service $cf_app_name autoscale
            set +x
            curl -O -k -u $artifactory_username:$artifactory_password $artifactory_endpoint/devops-local/cf-plugins/autoscaler-linux32-2.0.91
            set -x            
            cf install-plugin autoscaler-linux32-2.0.91 -f
            cf update-autoscaling-limits $cf_app_name 2 4
            cf create-autoscaling-rule $cf_app_name cpu 25 75
            cf enable-autoscaling $cf_app_name 
          fi

- name: check-for-artifact
  plan:
  - in_parallel:    
    - get: artifacts  
    - get: pcpm-once-a-day
      trigger: true

- name: deploy-green-pcpm
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - get: utility-image  
  - get: artifacts
    trigger: true
    passed: 
      - check-for-artifact
  - task: prepare-manifest
    image: utility-image
    params:
      <<: *pcpm-source
    config:
      platform: linux
      inputs:
      - name: artifacts
      outputs:
      - name: deployables
      run:
        path: sh
        args:
        - -exc
        - |  
          fileprefix=$(printenv file_prefix)
          input_directory=${PWD}/artifacts
          output_directory=${PWD}/deployables
          zip_file=${fileprefix}-*.zip
          unzip ${input_directory}/${zip_file} -d ${output_directory}
          manifest_file=${output_directory}/manifest.yml

          echo "Listing the directory"
          ls -a
          echo "Listing the directory-End"
          sed -i -e "s/\[buildpack_one\]/${buildpack_one}/" ${manifest_file}
          sed -i -e "s/\[buildpack_two\]/${buildpack_two}/" ${manifest_file}
          sed -i -e "s/\[app_name\]/${cf_app_name}-green/" ${manifest_file}
          sed -i -e "s/\[instances\]/${instance_number}/" ${manifest_file}
          sed -i -e "s/\[memory\]/${memory}/" ${manifest_file}
          sed -i -e "s/\[newrelic_app_name\]/${cf_app_name}/" ${manifest_file}
          sed -i -e "s/\[newrelic_app_lic\]/${newrelic_app_lic}/" ${manifest_file}
          set +x
          sed -i -e "s/\[s3_access_key\]/${s3_access_key}/" ${manifest_file}
          sed -i -e "s/\[s3_secret_key\]/${s3_secret_key}/" ${manifest_file}
          set -x
          sed -i -e "s/\[s3_bucket\]/${s3_bucket}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_min_wait_time_msecs\]/${resilience_policy_min_wait_time_msecs}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_max_wait_time_msecs\]/${resilience_policy_max_wait_time_msecs}/" ${manifest_file}
          sed -i -e "s/\[resilience_policy_max_retry_count\]/${resilience_policy_max_retry_count}/" ${manifest_file}
  - put: cf-pcpm
    params:
      manifest: deployables/manifest.yml
      path: deployables

- name: smoke-test-green-pcpm
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: utility-image    
    - get: cf-pcpm
      passed:
       - deploy-green-pcpm
      trigger: true      
  - task: smoke-tests
    image: utility-image
    params:
      <<: *pcpm-source
    config:
      platform: linux
      run:
        path: sh
        args:
        - -ec
        - |
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)
          cf login -u $cfuser -p $cfpass -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x

          app_url=$(cf app $cf_app_name-green | grep routes | sed -e 's/routes:\s*/https:\/\//')

          healthcheck_status=$(curl -s -o /dev/null -w "%{http_code}" ${app_url}/api/health)
          if [ "$healthcheck_status" != "200" ]; then
            echo "App healthcheck did not respond with OK as expected"
            exit 1
          fi

- name: blue-green-switch-pcpm
  on_success:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME PCPM deployed successfully
      text: Job $BUILD_JOB_NAME successful.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  on_failure:
    put: teams-alert
    params:
      title: |
        $BUILD_PIPELINE_NAME - $BUILD_JOB_NAME Failed
      text: Job $BUILD_JOB_NAME failed.
      actionName: View Job $BUILD_JOB_NAME Results
      actionTarget: https://concourse-dev.usdc10.axadmin.net/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  plan:
  - in_parallel:
    - get: utility-image
    - get: cf-pcpm   
      passed:
      - smoke-test-green-pcpm
      trigger: true
  - task: blue-to-green
    image: utility-image
    params:
      <<: *pcpm-source
    config:
      platform: linux
      run:
        path: sh
        args:
        - -exc
        - |
          set +x
          cfpass=$(printenv cf_deploy_password)
          cfuser=$(printenv cf_deploy_user)
          cf login -u $cfuser -p $cfpass -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x
          greenApps=$(cf apps | grep $cf_app_name-green | { grep -v grep || true; })
          if [[ -z $greenApps ]]; then exit 0; fi
          cf map-route $cf_app_name-green apps-$cf_env.usdc10.axadmin.net -n $cf_app_name
          cf unmap-route $cf_app_name apps-$cf_env.usdc10.axadmin.net -n $cf_app_name
          cf unmap-route $cf_app_name-green apps-$cf_env.usdc10.axadmin.net -n $cf_app_name-green
          cf stop $cf_app_name
          cf delete $cf_app_name -f
          # Remove the Green-Temp-Route.
          cf delete-route apps-$cf_env.usdc10.axadmin.net --hostname $cf_app_name-green -f
          # Rename Green app to Blue app.
          cf rename $cf_app_name-green $cf_app_name 
  - task: autoscaling
    image: utility-image
    params:
      <<: *pcpm-source
      artifactory_endpoint:  https://na-artifact-01.na.audatex.com:8443/artifactory
      artifactory_username: ((artifactory-username))
      artifactory_password: ((artifactory-password))
    config:
      platform: linux
      run:
        path: sh
        args:
        - -exc
        - |
          set +x
          cf login -u $cf_deploy_user -p $cf_deploy_password -a https://api.system-$cf_env.usdc10.axadmin.net -o $cf_organization -s $cf_space
          set -x
          if [ $setautoscale == true ]; then
            cf bind-service $cf_app_name autoscale
            set +x
            curl -O -k -u $artifactory_username:$artifactory_password $artifactory_endpoint/devops-local/cf-plugins/autoscaler-linux32-2.0.91
            set -x
            cf install-plugin autoscaler-linux32-2.0.91 -f
            cf update-autoscaling-limits $cf_app_name 2 4
            cf create-autoscaling-rule $cf_app_name cpu 25 75
            cf enable-autoscaling $cf_app_name
          fi

groups:

- name: mis
  jobs:
  - build-and-test-green
  - deploy-green-dev
  - smoke-test-green-dev
  - blue-green-switch-dev
  - code-analysis-green

- name: mis-qa
  jobs:
  - deploy-green-qa
  - smoke-test-green-qa
  - blue-green-switch-qa

- name: mis-pcpm
  jobs:
  - check-for-artifact  
  - deploy-green-pcpm
  - smoke-test-green-pcpm
  - blue-green-switch-pcpm
